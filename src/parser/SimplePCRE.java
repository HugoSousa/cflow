/* Generated By:JJTree&JavaCC: Do not edit this line. SimplePCRE.java */
package parser;

public class SimplePCRE/*@bgen(jjtree)*/implements SimplePCRETreeConstants, SimplePCREConstants {/*@bgen(jjtree)*/
  protected static JJTSimplePCREState jjtree = new JJTSimplePCREState();public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \u005c"1+(2+3)*var;\u005c" :");
    new SimplePCRE(System.in);
    try
    {
      SimpleNode n = SimplePCRE.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

  static final public SimpleNode Start() throws ParseException {
                         /*@bgen(jjtree) Re */
  SimpleNode jjtn000 = new SimpleNode(JJTRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Re();
      jj_consume_token(LF);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Re() throws ParseException {
                       /*@bgen(jjtree) #union(> 1) */
  SimpleNode jjtn000 = new SimpleNode(JJTUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
  boolean isUnion = false;
      BasicRe();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
        ReTail();
  isUnion = true;
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
   }
    }
  }

  static final public void ReTail() throws ParseException {
    jj_consume_token(UNION);
    BasicRe();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNION:
      ReTail();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void BasicRe() throws ParseException {
                                 /*@bgen(jjtree) #Sequence(> 1) */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimpleRe();
      BasicReTail();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  static final public void BasicReTail() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case OPEN1:
    case QUOTE:
      SimpleRe();
      BasicReTail();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void SimpleRe() throws ParseException {
    ElementalRe();
    SimpleReTail();
  }

  static final public void SimpleReTail() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case PLUS:
    case OPTIONAL:
    case OPEN2:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
                    SimpleNode jjtn001 = new SimpleNode(JJTSTAR);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(STAR);
        } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
        }
        break;
      case PLUS:
                    SimpleNode jjtn002 = new SimpleNode(JJTPLUS);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(PLUS);
        } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
        }
        break;
      case OPTIONAL:
                    SimpleNode jjtn003 = new SimpleNode(JJTOPTIONAL);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(OPTIONAL);
        } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                    }
        }
        break;
      case OPEN2:
                    SimpleNode jjtn004 = new SimpleNode(JJTCOUNT);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
        try {
          Count(jjtn004);
        } catch (Throwable jjte004) {
                    if (jjtc004) {
                      jjtree.clearNodeScope(jjtn004);
                      jjtc004 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte004 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte004;}
                    }
                    if (jjte004 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte004;}
                    }
                    {if (true) throw (Error)jjte004;}
        } finally {
                    if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004, true);
                    }
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void ElementalRe() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
            SimpleNode jjtn001 = new SimpleNode(JJTANY);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(ANY);
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
      break;
    case OPEN1:
      jj_consume_token(OPEN1);
      Re();
      jj_consume_token(CLOSE1);
      break;
    case QUOTE:
      Identifier();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Identifier() throws ParseException {
                        /*@bgen(jjtree) Identifier */
                         SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(QUOTE);
      t = jj_consume_token(IDENTIFIER);
         jjtn000.value = t.image;
      jj_consume_token(QUOTE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Count(SimpleNode parent) throws ParseException {
    jj_consume_token(OPEN2);
    Range(parent);
    jj_consume_token(CLOSE2);
  }

  static final public void Range(SimpleNode grandparent) throws ParseException {
                                         /*@bgen(jjtree) Range */
                                         SimpleNode jjtn000 = new SimpleNode(JJTRANGE);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);Token t1 = null; Token t2 = null;
    try {
     boolean hasComma = false;
      t1 = jj_consume_token(NUMBER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
                       hasComma = true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          t2 = jj_consume_token(NUMBER);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
                if (t2 != null)
                {
                        jjtn000.jjtSetValue(new ElementCounterRange(Integer.parseInt(t1.image),
                        Integer.parseInt(t2.image)));
                } else if (hasComma)
                {
                        jjtn000.jjtSetValue(new ElementCounterMinimum(Integer.parseInt(t1.image)));
                }
                else jjtn000.jjtSetValue(new ElementCounterExact(Integer.parseInt(t1.image)));
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SimplePCRETokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x200,0x46000,0x11c00,0x11c00,0x46000,0x10,0x100,};
   }

  /** Constructor with InputStream. */
  public SimplePCRE(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimplePCRE(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimplePCRETokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SimplePCRE(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimplePCRETokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SimplePCRE(SimplePCRETokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimplePCRETokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
