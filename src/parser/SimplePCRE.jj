/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SimplePCRE.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(SimplePCRE)package parser;

public class SimplePCRE/*@bgen(jjtree)*/implements SimplePCRETreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTSimplePCREState jjtree = new JJTSimplePCREState();

/*@egen*/  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    new SimplePCRE(System.in);    try    {      SimpleNode n = SimplePCRE.Start();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(SimplePCRE)SKIP :{ " " | "\r" | "\t" }TOKEN : /* IDENTIFIERS */{
  
  < NUMBER : < DIGIT > ( < DIGIT >)* >
| < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < LETTER : [ "a"-"z", "A"-"Z" ] >| < DIGIT : [ "0"-"9" ] >
| < COMMA : "," >
| < UNION : "|" >
| < STAR : "*" >
| < PLUS : "+" >
| < OPTIONAL : "?" >
| < ANY : "." >
| < OPEN1 : "(" >
| < CLOSE1 : ")" >
| < OPEN2 : "{" >
| < CLOSE2 : "}" >
| < QUOTE : "\"" >
| < LF: "\n" >}SimpleNode Start()    : {/*@bgen(jjtree) Re */
  SimpleNode jjtn000 = new SimpleNode(JJTRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Re */
        try {
/*@egen*/  
	Re()< LF >/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/  {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Re()           : {/*@bgen(jjtree) #union(> 1) */
  SimpleNode jjtn000 = new SimpleNode(JJTUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) #union(> 1) */
 try {
/*@egen*/
 {boolean isUnion = false;}
 BasicRe() ( ReTail()
 {isUnion = true;}
) ?/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
   }
 }
/*@egen*/
} 
 void ReTail()     :  {} 
{  

	 	 (	      	  <UNION > 
	  BasicRe()
	 (	    ReTail())?
	  ) 
	  
}

 void BasicRe()              :  {/*@bgen(jjtree) #Sequence(> 1) */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) #Sequence(> 1) */
  try {
/*@egen*/  

  SimpleRe()
  BasicReTail()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/

} 

  void BasicReTail()     : {} 
{  
	(
	  
	  SimpleRe() 
	  BasicReTail()
	) ?   
}

  void SimpleRe()      : {} 
{  
	
  ElementalRe()
  SimpleReTail()
	   
}


  void SimpleReTail()     : {} 
{  
	(
	  (/*@bgen(jjtree) Star */
                  {
                    SimpleNode jjtn001 = new SimpleNode(JJTSTAR);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/	     
		  <STAR >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                    }
                  }
/*@egen*/      
		|/*@bgen(jjtree) Plus */
                  {
                    SimpleNode jjtn002 = new SimpleNode(JJTPLUS);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ < PLUS >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                    }
                  }
/*@egen*/      
		|/*@bgen(jjtree) Optional */
                  {
                    SimpleNode jjtn003 = new SimpleNode(JJTOPTIONAL);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                  }
                  try {
/*@egen*/ < OPTIONAL >/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003, true);
                    }
                  }
/*@egen*/          
		|/*@bgen(jjtree) Count */
                  {
                    SimpleNode jjtn004 = new SimpleNode(JJTCOUNT);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
                  }
                  try {
/*@egen*/ Count(jjtn004)/*@bgen(jjtree)*/
                  } catch (Throwable jjte004) {
                    if (jjtc004) {
                      jjtree.clearNodeScope(jjtn004);
                      jjtc004 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte004 instanceof RuntimeException) {
                      throw (RuntimeException)jjte004;
                    }
                    if (jjte004 instanceof ParseException) {
                      throw (ParseException)jjte004;
                    }
                    throw (Error)jjte004;
                  } finally {
                    if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004, true);
                    }
                  }
/*@egen*/       
	) 
	)?
	   
}

  void ElementalRe()     : {} 
{/*@bgen(jjtree) Any */
          {
            SimpleNode jjtn001 = new SimpleNode(JJTANY);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/  
  
	  < ANY >/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/     
	| (
	  	< OPEN1 >
	  	Re()
	  	< CLOSE1 >
	  )
	| Identifier() 

	   
}

   void Identifier() : {/*@bgen(jjtree) Identifier */
                         SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
   
	< QUOTE >
	t= < IDENTIFIER >	{jjtn000.value = t.image; }
	< QUOTE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	  
}

   void Count(SimpleNode parent)      : {} 
{
   
	< OPEN2 >
	Range(parent)
	< CLOSE2 > 
	  
}

   void Range(SimpleNode grandparent) : {/*@bgen(jjtree) Range */
                                         SimpleNode jjtn000 = new SimpleNode(JJTRANGE);
                                         boolean jjtc000 = true;
                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1 = null; Token t2 = null; } 
{/*@bgen(jjtree) Range */
   try {
/*@egen*/
   {     boolean hasComma = false;   }   
	t1 = < NUMBER > 
	(	  < COMMA >   {hasComma = true;}
	  (	    t2 = < NUMBER >
	  )?
	)?/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ 
	  {		if (t2 != null)		{			jjtn000.jjtSetValue(new ElementCounterRange(Integer.parseInt(t1.image),
			Integer.parseInt(t2.image)));
		} else if (hasComma)		{			jjtn000.jjtSetValue(new ElementCounterMinimum(Integer.parseInt(t1.image)));
		}
		else jjtn000.jjtSetValue(new ElementCounterExact(Integer.parseInt(t1.image)));
		
	  }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
	  
}
 
